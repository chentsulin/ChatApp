{
  "name": "postcss-value-parser",
  "version": "3.1.1",
  "description": "Transforms css values and at-rule params into the tree",
  "main": "lib/index.js",
  "files": [
    "lib"
  ],
  "devDependencies": {
    "eslint": "^1.1.0",
    "tap-spec": "^4.1.0",
    "tape": "^4.2.0"
  },
  "scripts": {
    "test": "eslint lib test && tape test/*.js | tap-spec"
  },
  "author": {
    "name": "Bogdan Chadkin",
    "email": "trysound@yandex.ru"
  },
  "license": "MIT",
  "homepage": "https://github.com/TrySound/postcss-value-parser",
  "repository": {
    "type": "git",
    "url": "https://github.com/TrySound/postcss-value-parser.git"
  },
  "keywords": [
    "postcss",
    "value",
    "parser"
  ],
  "bugs": {
    "url": "https://github.com/TrySound/postcss-value-parser/issues"
  },
  "readme": "[![Travis CI](https://travis-ci.org/TrySound/postcss-value-parser.svg)](https://travis-ci.org/TrySound/postcss-value-parser)\n\n# postcss-value-parser\n\nTransforms css values and at-rule params into the tree.\n\n## Usage\n\n```js\nvar parser = require('postcss-value-parser');\n\n/*{\n    nodes: [\n      type: 'function',\n      value: 'rgba',\n      before: '',\n      after: '',\n      nodes: [\n        { type: 'word', value: '233' },\n        { type: 'div', value: ',', before: '', after: ' ' },\n        { type: 'word', value: '45' },\n        { type: 'div', value: ',', before: '', after: ' ' },\n        { type: 'word', value: '66' },\n        { type: 'div', value: ',', before: ' ', after: '' },\n        { type: 'word', value: '.5' }\n      ]\n    ]\n  }*/\nparser('rgba(233, 45, 66 ,.5)').walk(function (node) {\n  if (node.type === 'function' && node.value === 'rgba') {\n    var color = node.nodes.filter(function (node) {\n      return node.type === 'word';\n    }).map(function (node) {\n      return Number(node.value);\n    }); // [233, 45, 66, .5]\n\n    node.type = 'word';\n    node.value = convertToHex(color);\n  }\n}).toString(); // #E92D42\n```\n\n### Prevent walking into function\n\n```js\nparser('url(some url) 50% 50%')\n  .walk(function (node) {\n    // Your code\n\n    if (node.type === 'function' && node.value === 'url') {\n      return false;\n    }\n  })\n  .toString();\n```\n\n### Url node\n\n```\nurl( /path/to/image )\n```\n\nwill be parsed to\n\n```js\n[{\n  type: 'function',\n  value: 'url',\n  before: ' ',\n  after: ' ',\n  nodes: [\n    { type: 'word', value: '/path/to/image' }\n  ]\n}]\n```\n\n## Node types\n\n- `{ type: 'word', value: 'any' }`\n- `{ type: 'string', value: 'string', quote: '\"' }`\n- `{ type: 'string', value: 'string', quote: '\\'' }`\n- `{ type: 'div', value: '/' , before: ' ', after: ' ' }`\n- `{ type: 'div', value: ',', before: ' ', after: ' ' }`\n- `{ type: 'div', value: ':', before: ' ', after: ' ' }`\n- `{ type: 'space', value: ' ' }` space as a separator\n- `{ type: 'function', value: 'name', before: '', after: '', nodes: [] }`\n\n## API\n\n```\nvar valueParser = require('postcss-value-parser');\n```\n\n### valueParser.unit(value)\n\nReturns parsed value.\n\n```js\n// .2rem\n{\n  number: '.2',\n  unit: 'rem'\n}\n```\n\n### valueParser.stringify(nodes)\n\nStringifies node and array of nodes.\n\n### valueParser.walk(nodes, cb[, bubble])\n\nWalks each provided node, recursively for each node in a function.\n\nReturning `false` in the callback will prevent traversal of deeper, nested nodes(inside a function). You can use this to walk over only the immediate children. *note: This only applies if `bubble` is `false`(default).*\n\nReturns `this` instance.\n\n- `nodes`: array - `value-parser` nodes\n- `cb(node, index, nodes)`: function - Function to execute for each node\n- `bubble`: boolean - Walk from the deepest nodes upwards\n\n### var p = valueParser(value)\n\nReturns parsed tree.\n\n### p.nodes\n\nRoot nodes list.\n\n### p.toString()\n\nStringify tree to the value.\n\n### p.walk(cb[, bubble])\n\nWalks each node since `p.nodes`.\n\n# License\n\nMIT Â© [Bogdan Chadkin](mailto:trysound@yandex.ru)\n",
  "readmeFilename": "README.md",
  "_id": "postcss-value-parser@3.1.1",
  "dist": {
    "shasum": "d51827bf32ee2897c1ea2625981512240197965b"
  },
  "_from": "postcss-value-parser@^3.0.3",
  "_resolved": "https://registry.npmjs.org/postcss-value-parser/-/postcss-value-parser-3.1.1.tgz"
}
